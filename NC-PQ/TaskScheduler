class Solution {
    public int leastInterval(char[] tasks, int n) {

        PriorityQueue<Integer> pq = new PriorityQueue<>(Collections.reverseOrder());


        int[] freq = new int[26];

        for(char c : tasks){
            freq[c-'A']+=1;
        }

        for(int i : freq){

            if (i>0){
                pq.offer(i);
            }
        }
        

        int time = 0;

        Queue<int[]> q = new LinkedList<>();


        while(!pq.isEmpty() || !q.isEmpty()){
            
            time+=1;

            if(pq.isEmpty()){

                time =q.peek()[1];
            }
            else{
                int temp = pq.poll();
                temp-=1;
                if(temp>0) q.add(new int[]{temp,time+n});
            }

            if(!q.isEmpty() && q.peek()[1] ==time){
                pq.offer(q.poll()[0]);

            }

    }

    return time;
}
}
